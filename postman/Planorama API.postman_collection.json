{
	"info": {
		"_postman_id": "42e35806-0dc4-4c18-a692-a430ab1a531a",
		"name": "Planorama API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Autheticate",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const newAccessToken = responseHeaders['Authorization'].replace('Bearer','');",
									"// console.log('****', newAccessToken);",
									"// postman.setEnvironmentVariable(\"jwt-token\", newAccessToken);",
									"// Save the JWT in the collection variable for use by other requests",
									"// pm.collectionVariables.set('jwt-token', newAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"person\": {\n        \"email\": \"test@test.com\",\n        \"password\": \"111111\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/sign_in",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"sign_in"
							]
						},
						"description": "Log the person into the system. It will return the JWT token in the header which is needed for subsequent requests."
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "People",
			"item": [
				{
					"name": "Me Session",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get People",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get People (sparse fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person?fields[person]=name,pronouns&fields[email_addresses]=email",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							],
							"query": [
								{
									"key": "fields[person]",
									"value": "name,pronouns"
								},
								{
									"key": "fields[email_addresses]",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get People (sparse fields) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person?fields[person]=name,email_addresses&fields[email_address]=email,isdefault",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							],
							"query": [
								{
									"key": "fields[person]",
									"value": "name,email_addresses"
								},
								{
									"key": "fields[email_address]",
									"value": "email,isdefault"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/{{person-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"{{person-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Person Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/84672fd3-0d90-4f81-8511-ec1d82f2b9cb",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"84672fd3-0d90-4f81-8511-ec1d82f2b9cb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get People By Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"// //console.log('***', jsonData['data'][0].id);",
									"// pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person?filter={\"op\":\"all\",\"queries\":[[\"name\", \"contains\", \"staff\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"op\":\"all\",\"queries\":[[\"name\", \"contains\", \"staff\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get People By Filter all cols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"// //console.log('***', jsonData['data'][0].id);",
									"// pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person?filter={\"rules\":[[\"all\", \"like\", \"ta\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"rules\":[[\"all\", \"like\", \"ta\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assigned Surveys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/{{person-id}}/assigned_surveys",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"{{person-id}}",
								"assigned_surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Survey Submissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/{{person-id}}/submissions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"{{person-id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Survey Submissions For Survey",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/person/{{person-id}}/survey/{{survey-id}}/submissions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person",
								"{{person-id}}",
								"survey",
								"{{survey-id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"person-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"name_sort_by\": \"{{$randomFullName}}\",\n    \"name_sort_by_confirmed\": true,\n    \"email_addresses_attributes\": [\n        {\n            \"isdefault\": true,\n            \"email\": \"{{$randomEmail}}\",\n            \"is_valid\": true\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/person",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email Validator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"emails\": [\n        \"Orpha.Steuber27@gmail.com\",\n        \"arnold@aardvark.com\",\n        \"fuckity\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/validator/email",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"validator",
								"email"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Surveys",
			"item": [
				{
					"name": "Get Surveys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey?sortBy=surveys.name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "surveys.name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"survey\",\n        \"attributes\": {\n            \"name\": \"{{$randomFullName}}\",\n            \"pages_attributes\": [\n                {\n                    \"title\": \"{{$randomFullName}}\",\n                    \"questions_attributes\": [\n                        {\n                            \"question\":\"New Question\",\n                            \"question_type\": \"textfield\",\n                            \"answers_attributes\": [\n                                {\n                                    \"answer\": \"Option\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/survey?sortBy=surveys.name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "surveys.name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n    \"type\": \"page\",\n    \"attributes\": {\n        \"title\": \"{{$randomFullName}}\"\n    },\n    \"relationships\": {\n        \"survey\": {\n        \"data\": { \"type\": \"survey\", \"id\": \"{{survey-id}}\" }\n        }\n    }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/page",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"page"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"// //console.log('***', jsonData['data'][0].id);",
									"// pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"question\",\n    \"attributes\": {\n        \"question\": \"{{$randomFullName}} 11\",\n        \"question_type\": \"textfield\"\n    },\n    \"relationships\": {\n        \"page\": {\n            \"data\": { \"type\": \"page\", \"id\": \"{{page-id}}\" }\n        }\n    }\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/question",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Question Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"// //console.log('***', jsonData['data'][0].id);",
									"// pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"question\",\n        \"attributes\": {\n            \"question\": \"New Question\",\n            \"question_type\": \"textfield\",\n            \"mandatory\": false,\n            \"sort_order_position\": 0\n        },\n        \"relationships\": {\n            \"page\": {\n                \"id\": \"12bb592f-f95d-4a19-ba67-2ddc8e325115\",\n                \"type\": \"page\"\n        }\n       }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/question",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"question"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surveys For Person via Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey?filter={\"queries\":[[\"assigned_people.person_id\", \"=\", \"{{person-id}}\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"queries\":[[\"assigned_people.person_id\", \"=\", \"{{person-id}}\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surveys Via Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey?filter={\"queries\":[[\"surveys.id\", \"=\", \"{{survey-id}}\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"queries\":[[\"surveys.id\", \"=\", \"{{survey-id}}\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surveys Via Filter Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"survey-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey?filter={\"queries\":[[\"surveys.id\", \"=\", \"ef14a1df-fca5-45f7-9452-bd5aa0655d00\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"queries\":[[\"surveys.id\", \"=\", \"ef14a1df-fca5-45f7-9452-bd5aa0655d00\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign People to Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"people\": [\n        {\n            \"id\": \"{{person-id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/survey/{{survey-id}}/assign_people",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey",
								"{{survey-id}}",
								"assign_people"
							]
						}
					},
					"response": []
				},
				{
					"name": "UnAssign People to Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"people\": [\n        {\n            \"id\": \"{{person-id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/survey/{{survey-id}}/unassign_people",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey",
								"{{survey-id}}",
								"unassign_people"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pages for Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"page-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey/{{survey-id}}/pages",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey",
								"{{survey-id}}",
								"pages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get A Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"// //console.log('***', jsonData['data'][0].id);",
									"// pm.collectionVariables.set(\"page-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey/{{survey-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey",
								"{{survey-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Questions for Page",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/page/{{page-id}}/questions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"page",
								"{{page-id}}",
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Submissions for Survey",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/survey/{{survey-id}}/submissions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"survey",
								"{{survey-id}}",
								"submissions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mailings",
			"item": [
				{
					"name": "Get Mailing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"mailing-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mailing by filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"mailing-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing?filter={\"op\":\"all\",\"queries\":[[\"mailing_state\", \"=\", \"draft\"]]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing"
							],
							"query": [
								{
									"key": "filter",
									"value": "{\"op\":\"all\",\"queries\":[[\"mailing_state\", \"=\", \"draft\"]]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mailing sparse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"mailing-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing?fields[mailing]=id,title",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing"
							],
							"query": [
								{
									"key": "fields[mailing]",
									"value": "id,title"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Mailing",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail_template_id\": \"{{mail-template-id}}\",\n    \"testrun\": false,\n    \"include_email\": false,\n    \"cc_all\": false,\n    \"title\": \"{{$randomLoremWords}}\",\n    \"subject\": \"{{$randomLoremWords}}\",\n    \"content\": \"Dear <%= person.published_name %> {{$randomLoremParagraph}}\",\n    \"emails\": [\"test@test.com\", \"testing8@peoplerecord.com\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/mailing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign People to Mailing Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"people\": [\n        {\n            \"id\": \"{{person-id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/mailing/{{mailing-id}}/assign_people",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"{{mailing-id}}",
								"assign_people"
							]
						}
					},
					"response": []
				},
				{
					"name": "UnAssign People to Mailing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"people\": [\n        {\n            \"id\": \"{{person-id}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/mailing/{{mailing-id}}/unassign_people",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"{{mailing-id}}",
								"unassign_people"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Mailing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing/{{mailing-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"{{mailing-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule Single Mailing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing/schedule/{{mailing-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"schedule",
								"{{mailing-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schedule Single Mailing Test",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing/schedule/{{mailing-id}}/test@test.com/true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"schedule",
								"{{mailing-id}}",
								"test@test.com",
								"true"
							]
						}
					},
					"response": []
				},
				{
					"name": "Preview Single Mailing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing/preview/{{mailing-id}}/test@test.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"preview",
								"{{mailing-id}}",
								"test@test.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone Mailing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/mailing/clone/{{mailing-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"mailing",
								"clone",
								"{{mailing-id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt-token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program Items",
			"item": []
		},
		{
			"name": "Venues",
			"item": [
				{
					"name": "Venues",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/venue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"venue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rooms",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/room",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"room"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agreements",
			"item": [
				{
					"name": "Get My Agreements Signed",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/agreement/signed",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement",
								"signed"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				},
				{
					"name": "Get My Agreements UnSigned (only latest versions)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/agreement/unsigned",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement",
								"unsigned"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				},
				{
					"name": "Get Latest Agreements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"agreement-id\", jsonData['data'][0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/agreement/latest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement",
								"latest"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				},
				{
					"name": "Sign an Agreement",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/agreement/sign/{{agreement-id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement",
								"sign",
								"{{agreement-id}}"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				},
				{
					"name": "Get All Agreements",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/agreement",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				},
				{
					"name": "Create an Agreement",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{$guid}}\",\n    \"title\": \"{{$randomLoremWords}}\",\n    \"terms\": \"{{$randomLoremParagraph}}\",\n    \"agreement_type\": \"stuff\",\n    \"target\": \"member\"\n    // created_by_id\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/agreement",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"agreement"
							]
						},
						"description": "#postman-to-openapi  \n| object | name | description | required | type | example |  \n|---|---|---|---|---|---|  \n| path | person-id | The id pf the person being retreived | true | UUID |8bcac661-a82e-4461-9910-ef017566e9a8 |"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sessions",
			"item": [
				{
					"name": "Get Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//console.log('***', jsonData['data'][0].id);",
									"pm.collectionVariables.set(\"session-id\", jsonData['data'][0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/session",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session Assignments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/session_assignment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"session_assignment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Session Assignment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/session_assignment/2a016b1c-7bec-4eb1-8045-cef6a0377f35",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"session_assignment",
								"2a016b1c-7bec-4eb1-8045-cef6a0377f35"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session Assignment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"session_id\": \"{{session-id}}\",\n    \"person_id\": \"{{person-id}}\",\n    \"interested\": true,\n    \"interest_ranking\": 1,\n    \"interest_notes\": \"I would like to do this\",\n    \"interest_role\": \"can_moderate\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/session_assignment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"session_assignment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RBAC",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt-token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/rbac",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"rbac"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// const getTokenRequest = {",
					"//   method: 'POST',",
					"//   url: 'http://localhost:3000/auth/sign_in',",
					"//   header: {",
					"//     'Content-Type': 'application/json',",
					"//     'Accept': 'application/json'",
					"//   },",
					"//   body: {",
					"//     mode: 'raw',",
					"//     raw: JSON.stringify({\"person\": { \"email\": \"test@test.com\", \"password\": \"111111\" }})",
					"//   }",
					"// };",
					"",
					"// pm.sendRequest(",
					"//   getTokenRequest, ",
					"//   (err, response) => {",
					"//     const newAccessToken = response.headers.get('Authorization').replace('Bearer','');",
					"//     pm.variables.set('jwt-token', newAccessToken);",
					"//   }",
					"// );",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt-token",
			"value": ""
		},
		{
			"key": "survey-id",
			"value": ""
		},
		{
			"key": "page-id",
			"value": ""
		},
		{
			"key": "template-title",
			"value": ""
		},
		{
			"key": "template-subject",
			"value": ""
		},
		{
			"key": "template-content",
			"value": ""
		},
		{
			"key": "mail-template-id",
			"value": ""
		},
		{
			"key": "mailing-id",
			"value": ""
		},
		{
			"key": "person-id",
			"value": ""
		},
		{
			"key": "agreement-id",
			"value": ""
		},
		{
			"key": "sessiobn-id",
			"value": ""
		},
		{
			"key": "session-id",
			"value": ""
		}
	]
}