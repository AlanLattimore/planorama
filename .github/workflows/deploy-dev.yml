---
name: Deploy a branch to the dev server

on:
  workflow_dispatch: {}
  push:
    branches:
      - ci
  pull_request:
    branches: []

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:12-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        ruby-version: ["2.7"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
        # change this to (see https://github.com/ruby/setup-ruby#versioning):
        # uses: ruby/setup-ruby@v1
        uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Install PostgreSQL
        run: sudo apt-get -yqq install libpq-dev
      - name: Setup Database
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        run: bin/rails db:create db:structure:load
      - name: Run tests
        env:
          RAILS_ENV: test
          DB_HOST: localhost
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        run: bundle exec rspec

  deploy:
    needs:
      - test

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_name

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Define the repository labels
        run: |
          echo "CONTAINER_DEPLOY_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/planorama:manual-${{ steps.extract_name.outputs.branch }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: "${{ env.CONTAINER_DEPLOY_REPOSITORY }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - id: deploy
        name: Deploy to the target host
        run: |
          ./deploy/deploy-tag.py "manual-${{ steps.extract_name.outputs.branch }}" dev --description "@${{ github.actor }} deployed ${{ steps.extract_name.outputs.branch }} to staging from the deploy action"
