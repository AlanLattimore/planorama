#
# This is the dev version of the docker compose
# this is overlaid on the docket compose for dev environments
#
# docker-compose -p plano-dev -f docker-compose-dev.yml up
#
# docker-compose -p plano-dev -f docker-compose-dev.yml up --build
#
# docker-compose -p plano-dev -f docker-compose-dev.yml up --build -d
#
version: "3.7"

#
# docker volume create --name=pgdata
# docker volume create --name=redis-data
# docker volume create --name=node_modules
# docker volume create --name=node_modules_sidekiq
#
volumes:
  pgdata:
    external: true
  redis-data:
    external: true
  node_modules:
    external: true
  node_modules_sidekiq:
    external: true
  box: {} # used for the bundler, persistent store between runs

services:
  planorama:
    command: /opt/planorama/script/planorama_start.sh
    build:
      context: .
      dockerfile: Dockerfile-dev
    env_file:
      - .envrc
    environment:
      - DB_HOST=postgres
      - RAILS_ENV=development
      - NODE_ENV=development
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0
      - SIDEKIQ_REDIS_URL=redis://redis:6379/0
    volumes:
      - node_modules:/opt/planorama/node_modules
      - .:/opt/planorama
      - box:/var/bundler
      - type: tmpfs
        target: /opt/planorama/tmp
    ports:
      - "3000:3000"
      - "3035:3035"
    depends_on:
      - postgres
      - redis
    links:
      - redis
      - postgres

  planorama-sidekiq:
    command: /opt/planorama/script/planorama_sidekiq.sh
    build:
      context: .
      dockerfile: Dockerfile-dev
    env_file:
      - .envrc
    environment:
      - DB_HOST=postgres
      - RAILS_ENV=development
      - NODE_ENV=development
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0
      - SIDEKIQ_REDIS_URL=redis://redis:6379/0
    volumes:
      - node_modules_sidekiq:/opt/planorama/node_modules
      - .:/opt/planorama
      - box:/var/bundler
      - type: tmpfs
        target: /opt/planorama/tmp
    depends_on:
      - postgres
      - redis
    links:
      - redis
      - postgres

  # The database server - only needed for dev and test
  # The Postgre DB
  postgres:
    image: postgres:12-alpine
    restart: always
    env_file:
      - .envrc
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  livereload:
    image: planorama:dev
    build:
      context: .
      dockerfile: Dockerfile-dev
    command: /opt/planorama/script/livereload_start.sh
    ports:
      - 35729:35729
    volumes:
      - .:/opt/planorama

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - 1080:1080
